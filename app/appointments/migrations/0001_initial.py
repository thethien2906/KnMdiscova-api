# Generated by Django 5.1.9 on 2025-05-31 01:02

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('children', '0001_initial'),
        ('parents', '0002_alter_parent_phone_number'),
        ('psychologists', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppointmentSlot',
            fields=[
                ('slot_id', models.BigAutoField(help_text='Unique identifier for the appointment slot', primary_key=True, serialize=False)),
                ('slot_date', models.DateField(help_text='Date of this appointment slot', verbose_name='slot date')),
                ('start_time', models.TimeField(help_text='Start time of this 1-hour slot', verbose_name='start time')),
                ('end_time', models.TimeField(help_text='End time of this 1-hour slot (start_time + 1 hour)', verbose_name='end time')),
                ('is_booked', models.BooleanField(default=False, help_text='Whether this slot is currently booked', verbose_name='is booked')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('availability_block', models.ForeignKey(help_text='Availability block this slot was generated from', on_delete=django.db.models.deletion.CASCADE, related_name='generated_slots', to='psychologists.psychologistavailability')),
                ('psychologist', models.ForeignKey(help_text='Psychologist this slot belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='appointment_slots', to='psychologists.psychologist')),
            ],
            options={
                'verbose_name': 'Appointment Slot',
                'verbose_name_plural': 'Appointment Slots',
                'db_table': 'appointment_slots',
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('appointment_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the appointment', primary_key=True, serialize=False)),
                ('session_type', models.CharField(choices=[('OnlineMeeting', 'Online Session - 1 hour'), ('InitialConsultation', 'Initial Consultation - 2 hours (In-Person)')], help_text='Type of session: online or in-person consultation', max_length=20, verbose_name='session type')),
                ('appointment_status', models.CharField(choices=[('Payment_Pending', 'Payment Pending'), ('Scheduled', 'Scheduled'), ('Completed', 'Completed'), ('Cancelled', 'Cancelled'), ('No_Show', 'No Show')], default='Payment_Pending', help_text='Current status of the appointment', max_length=20, verbose_name='appointment status')),
                ('payment_status', models.CharField(choices=[('Pending', 'Pending'), ('Paid', 'Paid'), ('Failed', 'Failed'), ('Refunded', 'Refunded')], default='Pending', help_text='Payment status for this appointment', max_length=20, verbose_name='payment status')),
                ('scheduled_start_time', models.DateTimeField(help_text='When the appointment is scheduled to start', verbose_name='scheduled start time')),
                ('scheduled_end_time', models.DateTimeField(help_text='When the appointment is scheduled to end', verbose_name='scheduled end time')),
                ('actual_start_time', models.DateTimeField(blank=True, help_text='When the appointment actually started', null=True, verbose_name='actual start time')),
                ('actual_end_time', models.DateTimeField(blank=True, help_text='When the appointment actually ended', null=True, verbose_name='actual end time')),
                ('meeting_address', models.TextField(blank=True, help_text='Address for in-person meetings (defaults from psychologist profile)', verbose_name='meeting address')),
                ('meeting_link', models.URLField(blank=True, help_text='Video meeting link for online sessions', max_length=512, null=True, verbose_name='meeting link')),
                ('meeting_id', models.CharField(blank=True, help_text='Meeting ID for video sessions', max_length=100, verbose_name='meeting ID')),
                ('qr_verification_code', models.CharField(blank=True, help_text='QR code for verifying in-person session attendance', max_length=32, unique=True, verbose_name='QR verification code')),
                ('session_verified_at', models.DateTimeField(blank=True, help_text='When the session was verified via QR code', null=True, verbose_name='session verified at')),
                ('parent_notes', models.TextField(blank=True, help_text='Notes from parent about the appointment', verbose_name='parent notes')),
                ('psychologist_notes', models.TextField(blank=True, help_text='Private notes from psychologist', verbose_name='psychologist notes')),
                ('cancellation_reason', models.TextField(blank=True, help_text='Reason for cancellation if cancelled', verbose_name='cancellation reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('child', models.ForeignKey(help_text='Child this appointment is for', on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='children.child')),
                ('parent', models.ForeignKey(help_text='Parent who booked the appointment', on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='parents.parent')),
                ('psychologist', models.ForeignKey(help_text='Psychologist providing the service', on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='psychologists.psychologist')),
                ('appointment_slots', models.ManyToManyField(help_text='Appointment slots reserved for this appointment', related_name='appointments', to='appointments.appointmentslot')),
            ],
            options={
                'verbose_name': 'Appointment',
                'verbose_name_plural': 'Appointments',
                'db_table': 'appointments',
            },
        ),
        migrations.AddIndex(
            model_name='appointmentslot',
            index=models.Index(fields=['psychologist', 'slot_date', 'start_time'], name='appointment_psychol_23af0f_idx'),
        ),
        migrations.AddIndex(
            model_name='appointmentslot',
            index=models.Index(fields=['psychologist', 'is_booked'], name='appointment_psychol_0b8a6b_idx'),
        ),
        migrations.AddIndex(
            model_name='appointmentslot',
            index=models.Index(fields=['slot_date', 'is_booked'], name='appointment_slot_da_a0870e_idx'),
        ),
        migrations.AddIndex(
            model_name='appointmentslot',
            index=models.Index(fields=['availability_block'], name='appointment_availab_120ff9_idx'),
        ),
        migrations.AddIndex(
            model_name='appointmentslot',
            index=models.Index(fields=['created_at'], name='appointment_created_81899b_idx'),
        ),
        migrations.AddConstraint(
            model_name='appointmentslot',
            constraint=models.CheckConstraint(condition=models.Q(('end_time__gt', models.F('start_time'))), name='slot_end_time_after_start_time'),
        ),
        migrations.AlterUniqueTogether(
            name='appointmentslot',
            unique_together={('psychologist', 'slot_date', 'start_time')},
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['psychologist', 'scheduled_start_time'], name='appointment_psychol_5e6e7d_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['parent', 'scheduled_start_time'], name='appointment_parent__cd0264_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['child', 'scheduled_start_time'], name='appointment_child_i_4f34ee_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['appointment_status', 'scheduled_start_time'], name='appointment_appoint_9f4f1b_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['session_type', 'scheduled_start_time'], name='appointment_session_53ccd4_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['qr_verification_code'], name='appointment_qr_veri_216fb0_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['created_at'], name='appointment_created_e3a5d5_idx'),
        ),
    ]
