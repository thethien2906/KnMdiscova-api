# Generated by Django 5.1.9 on 2025-05-29 03:19

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Psychologist',
            fields=[
                ('user', models.OneToOneField(help_text='Reference to the base User account', limit_choices_to={'user_type': 'Psychologist'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(help_text="Psychologist's first name", max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(help_text="Psychologist's last name", max_length=100, verbose_name='last name')),
                ('license_number', models.CharField(help_text='Professional license number', max_length=100, unique=True, verbose_name='license number')),
                ('license_issuing_authority', models.CharField(blank=True, help_text='Authority that issued the license', max_length=255, verbose_name='license issuing authority')),
                ('license_expiry_date', models.DateField(blank=True, help_text='When the professional license expires', null=True, verbose_name='license expiry date')),
                ('years_of_experience', models.PositiveIntegerField(help_text='Number of years of professional experience', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)], verbose_name='years of experience')),
                ('biography', models.TextField(blank=True, help_text='Professional biography and background', verbose_name='biography')),
                ('education', models.JSONField(blank=True, default=list, help_text='Array of education objects: {degree, institution, year}', verbose_name='education')),
                ('certifications', models.JSONField(blank=True, default=list, help_text='Array of certification objects: {name, institution, year}', verbose_name='certifications')),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Hourly rate in USD', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='hourly rate')),
                ('verification_status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending', help_text='Current verification status of the psychologist', max_length=20, verbose_name='verification status')),
                ('admin_notes', models.TextField(blank=True, help_text='Internal review notes for administrators', verbose_name='admin notes')),
                ('website_url', models.URLField(blank=True, help_text='Professional website URL', max_length=512, verbose_name='website URL')),
                ('linkedin_url', models.URLField(blank=True, help_text='LinkedIn profile URL', max_length=512, verbose_name='LinkedIn URL')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'Psychologist',
                'verbose_name_plural': 'Psychologists',
                'db_table': 'psychologists',
                'indexes': [models.Index(fields=['verification_status'], name='psychologis_verific_f16de1_idx'), models.Index(fields=['license_number'], name='psychologis_license_9869cb_idx'), models.Index(fields=['years_of_experience'], name='psychologis_years_o_da5726_idx'), models.Index(fields=['hourly_rate'], name='psychologis_hourly__5bd1ac_idx'), models.Index(fields=['created_at'], name='psychologis_created_c3d1dd_idx')],
            },
        ),
        migrations.CreateModel(
            name='PsychologistAvailability',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('day_of_week', models.PositiveSmallIntegerField(choices=[(0, 'Sunday'), (1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday')], help_text='Day of the week (0=Sunday, 1=Monday, etc.)', verbose_name='day of week')),
                ('start_time', models.TimeField(help_text='Start time for availability', verbose_name='start time')),
                ('end_time', models.TimeField(help_text='End time for availability', verbose_name='end time')),
                ('is_recurring', models.BooleanField(default=True, help_text='Whether this is a recurring weekly availability', verbose_name='is recurring')),
                ('specific_date', models.DateField(blank=True, help_text='For non-recurring availability overrides on specific dates', null=True, verbose_name='specific date')),
                ('is_booked', models.BooleanField(default=False, help_text='Whether this time slot is currently booked', verbose_name='is booked')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('psychologist', models.ForeignKey(help_text='The psychologist this availability belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to='psychologists.psychologist')),
            ],
            options={
                'verbose_name': 'Psychologist Availability',
                'verbose_name_plural': 'Psychologist Availabilities',
                'db_table': 'psychologist_availability',
                'indexes': [models.Index(fields=['psychologist', 'day_of_week'], name='psychologis_psychol_377aa3_idx'), models.Index(fields=['psychologist', 'specific_date'], name='psychologis_psychol_305c80_idx'), models.Index(fields=['is_booked'], name='psychologis_is_book_eee090_idx'), models.Index(fields=['start_time', 'end_time'], name='psychologis_start_t_f8d8cb_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('start_time__lt', models.F('end_time'))), name='start_time_before_end_time'), models.UniqueConstraint(condition=models.Q(('specific_date__isnull', True)), fields=('psychologist', 'day_of_week', 'start_time', 'end_time'), name='unique_recurring_availability'), models.UniqueConstraint(condition=models.Q(('specific_date__isnull', False)), fields=('psychologist', 'specific_date', 'start_time', 'end_time'), name='unique_specific_date_availability')],
            },
        ),
    ]
