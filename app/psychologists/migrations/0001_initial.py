# Generated by Django 5.1.9 on 2025-05-30 05:20

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Psychologist',
            fields=[
                ('user', models.OneToOneField(help_text='Link to the base user account', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='psychologist_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(help_text="Psychologist's first name", max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(help_text="Psychologist's last name", max_length=100, verbose_name='last name')),
                ('license_number', models.CharField(help_text='Professional license number', max_length=100, unique=True, verbose_name='license number')),
                ('license_issuing_authority', models.CharField(help_text='Authority that issued the license', max_length=255, verbose_name='license issuing authority')),
                ('license_expiry_date', models.DateField(help_text='When the license expires', verbose_name='license expiry date')),
                ('years_of_experience', models.PositiveIntegerField(help_text='Total years of professional experience', validators=[django.core.validators.MinValueValidator(0, message='Years of experience cannot be negative'), django.core.validators.MaxValueValidator(60, message='Years of experience seems too high')], verbose_name='years of experience')),
                ('biography', models.TextField(blank=True, help_text='Professional biography and approach', verbose_name='biography')),
                ('education', models.JSONField(blank=True, default=list, help_text='Educational background (degree, institution, year)', verbose_name='education')),
                ('certifications', models.JSONField(blank=True, default=list, help_text='Professional certifications (name, institution, year)', verbose_name='certifications')),
                ('verification_status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending', help_text='Current verification status', max_length=20, verbose_name='verification status')),
                ('admin_notes', models.TextField(blank=True, help_text='Internal notes for verification process', verbose_name='admin notes')),
                ('offers_initial_consultation', models.BooleanField(default=True, help_text='Offers 2-hour in-person initial consultations', verbose_name='offers initial consultation')),
                ('offers_online_sessions', models.BooleanField(default=True, help_text='Offers 1-hour online video sessions', verbose_name='offers online sessions')),
                ('office_address', models.TextField(blank=True, help_text='Complete office address for in-person consultations', verbose_name='office address')),
                ('website_url', models.URLField(blank=True, help_text='Professional website URL', max_length=512, verbose_name='website URL')),
                ('linkedin_url', models.URLField(blank=True, help_text='LinkedIn profile URL', max_length=512, verbose_name='LinkedIn URL')),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Hourly rate in USD for online sessions', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0, message='Hourly rate cannot be negative')], verbose_name='hourly rate')),
                ('initial_consultation_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Rate for 2-hour initial consultation', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0, message='Initial consultation rate cannot be negative')], verbose_name='initial consultation rate')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'Psychologist',
                'verbose_name_plural': 'Psychologists',
                'db_table': 'psychologists',
                'indexes': [models.Index(fields=['first_name', 'last_name'], name='psychologis_first_n_68add4_idx'), models.Index(fields=['verification_status'], name='psychologis_verific_f16de1_idx'), models.Index(fields=['license_number'], name='psychologis_license_9869cb_idx'), models.Index(fields=['offers_initial_consultation', 'offers_online_sessions'], name='psychologis_offers__904dc4_idx'), models.Index(fields=['created_at'], name='psychologis_created_c3d1dd_idx')],
            },
        ),
        migrations.CreateModel(
            name='PsychologistAvailability',
            fields=[
                ('availability_id', models.BigAutoField(help_text='Unique identifier for availability block', primary_key=True, serialize=False)),
                ('day_of_week', models.IntegerField(help_text='Day of week: 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday', validators=[django.core.validators.MinValueValidator(0, message='Day of week must be 0-6 (0=Sunday)'), django.core.validators.MaxValueValidator(6, message='Day of week must be 0-6 (6=Saturday)')], verbose_name='day of week')),
                ('start_time', models.TimeField(help_text='Start time of availability block', verbose_name='start time')),
                ('end_time', models.TimeField(help_text='End time of availability block', verbose_name='end time')),
                ('is_recurring', models.BooleanField(default=True, help_text='Whether this availability repeats weekly', verbose_name='is recurring')),
                ('specific_date', models.DateField(blank=True, help_text='For non-recurring availability overrides on specific dates', null=True, verbose_name='specific date')),
                ('is_booked', models.BooleanField(default=False, help_text='Legacy field - DO NOT USE for booking logic. Use AppointmentSlot model instead.', verbose_name='is booked')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('psychologist', models.ForeignKey(help_text='Psychologist this availability belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='availability_blocks', to='psychologists.psychologist')),
            ],
            options={
                'verbose_name': 'Psychologist Availability',
                'verbose_name_plural': 'Psychologist Availabilities',
                'db_table': 'psychologist_availability',
                'indexes': [models.Index(fields=['psychologist', 'day_of_week'], name='psychologis_psychol_377aa3_idx'), models.Index(fields=['psychologist', 'specific_date'], name='psychologis_psychol_305c80_idx'), models.Index(fields=['is_recurring'], name='psychologis_is_recu_648411_idx'), models.Index(fields=['day_of_week', 'start_time'], name='psychologis_day_of__fd4468_idx'), models.Index(fields=['created_at'], name='psychologis_created_da89f0_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('end_time__gt', models.F('start_time'))), name='end_time_after_start_time'), models.CheckConstraint(condition=models.Q(('is_recurring', False), ('specific_date__isnull', True), _connector='OR'), name='recurring_no_specific_date'), models.CheckConstraint(condition=models.Q(('is_recurring', True), ('specific_date__isnull', False), _connector='OR'), name='non_recurring_has_specific_date')],
                'unique_together': {('psychologist', 'day_of_week', 'start_time', 'end_time', 'specific_date')},
            },
        ),
    ]
