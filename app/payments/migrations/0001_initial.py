# Generated by Django 5.1.9 on 2025-06-04 01:18

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('appointments', '0004_alter_appointment_session_type'),
        ('psychologists', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the order', primary_key=True, serialize=False)),
                ('order_type', models.CharField(choices=[('psychologist_registration', 'Psychologist Registration'), ('appointment_booking', 'Appointment Booking')], help_text='Type of order: registration or appointment booking', max_length=30, verbose_name='order type')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Order amount', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='amount')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('GBP', 'British Pound')], default='USD', help_text='Currency code', max_length=3, verbose_name='currency')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='pending', help_text='Current order status', max_length=20, verbose_name='status')),
                ('payment_provider', models.CharField(choices=[('stripe', 'Stripe'), ('paypal', 'PayPal')], help_text='Payment provider used for this order', max_length=20, verbose_name='payment provider')),
                ('provider_order_id', models.CharField(blank=True, help_text='Order ID from payment provider', max_length=255, null=True, verbose_name='provider order ID')),
                ('description', models.TextField(blank=True, help_text='Order description', verbose_name='description')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional order metadata', verbose_name='metadata')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When the order expires if not paid', null=True, verbose_name='expires at')),
                ('paid_at', models.DateTimeField(blank=True, help_text='When the order was paid', null=True, verbose_name='paid at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('appointment', models.ForeignKey(blank=True, help_text='Appointment associated with the order (for booking only)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='appointments.appointment')),
                ('psychologist', models.ForeignKey(blank=True, help_text='Psychologist associated with the order (for registration or booking)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='psychologists.psychologist')),
                ('user', models.ForeignKey(help_text='User who placed the order', on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'db_table': 'orders',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('payment_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the payment', primary_key=True, serialize=False)),
                ('provider_payment_id', models.CharField(help_text='Payment ID from payment provider (Stripe, PayPal, etc.)', max_length=255, verbose_name='provider payment ID')),
                ('provider_payment_intent_id', models.CharField(blank=True, help_text='Payment intent ID from provider (for Stripe)', max_length=255, null=True, verbose_name='provider payment intent ID')),
                ('payment_method', models.CharField(choices=[('card', 'Credit/Debit Card'), ('paypal', 'PayPal'), ('bank_transfer', 'Bank Transfer'), ('digital_wallet', 'Digital Wallet')], help_text='Method used for payment', max_length=20, verbose_name='payment method')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('succeeded', 'Succeeded'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded')], default='pending', help_text='Current payment status', max_length=20, verbose_name='status')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Payment amount', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='amount')),
                ('currency', models.CharField(help_text='Currency code', max_length=3, verbose_name='currency')),
                ('provider_response', models.JSONField(blank=True, default=dict, help_text='Raw response data from payment provider', verbose_name='provider response')),
                ('failure_reason', models.TextField(blank=True, help_text='Reason for payment failure', null=True, verbose_name='failure reason')),
                ('refunded_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount that has been refunded', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='refunded amount')),
                ('processed_at', models.DateTimeField(blank=True, help_text='When the payment was processed by provider', null=True, verbose_name='processed at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('order', models.ForeignKey(help_text='Order this payment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='payments.order')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'db_table': 'payments',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('transaction_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the transaction', primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('order_created', 'Order Created'), ('payment_initiated', 'Payment Initiated'), ('payment_processing', 'Payment Processing'), ('payment_succeeded', 'Payment Succeeded'), ('payment_failed', 'Payment Failed'), ('payment_cancelled', 'Payment Cancelled'), ('refund_initiated', 'Refund Initiated'), ('refund_succeeded', 'Refund Succeeded'), ('refund_failed', 'Refund Failed'), ('order_expired', 'Order Expired'), ('webhook_received', 'Webhook Received'), ('webhook_processed', 'Webhook Processed'), ('status_change', 'Status Change')], help_text='Type of transaction', max_length=30, verbose_name='transaction type')),
                ('amount', models.DecimalField(blank=True, decimal_places=2, help_text='Transaction amount (if applicable)', max_digits=10, null=True, verbose_name='amount')),
                ('currency', models.CharField(blank=True, help_text='Currency code (if applicable)', max_length=3, null=True, verbose_name='currency')),
                ('previous_status', models.CharField(blank=True, help_text='Previous status before change', max_length=20, null=True, verbose_name='previous status')),
                ('new_status', models.CharField(blank=True, help_text='New status after change', max_length=20, null=True, verbose_name='new status')),
                ('description', models.TextField(help_text='Human-readable description of the transaction', verbose_name='description')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional transaction metadata', verbose_name='metadata')),
                ('provider_reference', models.CharField(blank=True, help_text='Reference ID from payment provider', max_length=255, null=True, verbose_name='provider reference')),
                ('provider_response', models.JSONField(blank=True, default=dict, help_text='Response data from payment provider', verbose_name='provider response')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address where transaction was initiated', null=True, verbose_name='IP address')),
                ('user_agent', models.TextField(blank=True, help_text='User agent string', null=True, verbose_name='user agent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('initiated_by', models.ForeignKey(blank=True, help_text='User who initiated the transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='initiated_transactions', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(help_text='Order this transaction relates to', on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='payments.order')),
                ('payment', models.ForeignKey(blank=True, help_text='Payment this transaction relates to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='payments.payment')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'db_table': 'transactions',
            },
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['user', 'status'], name='orders_user_id_17dbdf_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['order_type', 'status'], name='orders_order_t_4558a7_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['payment_provider', 'status'], name='orders_payment_22a518_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['psychologist', 'order_type'], name='orders_psychol_e6b9b9_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['appointment'], name='orders_appoint_a3f009_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['provider_order_id'], name='orders_provide_9641ed_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['created_at'], name='orders_created_77e2b9_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['expires_at'], name='orders_expires_e43ed9_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status', 'created_at'], name='orders_status_11db6c_idx'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('order_type', 'appointment_booking'), ('psychologist__isnull', False), _connector='OR'), name='registration_order_has_psychologist'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('order_type', 'psychologist_registration'), models.Q(('psychologist__isnull', False), ('appointment__isnull', False)), _connector='OR'), name='appointment_order_has_psychologist_and_appointment'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('amount__gt', 0)), name='positive_amount'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['order', 'status'], name='payments_order_i_3d4604_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['provider_payment_id'], name='payments_provide_340c17_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['provider_payment_intent_id'], name='payments_provide_668241_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['status', 'created_at'], name='payments_status_426d4f_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['order', 'created_at'], name='payments_order_i_6c2ee2_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['amount', 'currency'], name='payments_amount_aee695_idx'),
        ),
        migrations.AddConstraint(
            model_name='payment',
            constraint=models.CheckConstraint(condition=models.Q(('refunded_amount__lte', models.F('amount'))), name='refunded_amount_not_exceed_payment'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['order', 'created_at'], name='transaction_order_i_918d01_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['payment', 'created_at'], name='transaction_payment_957cb6_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['transaction_type', 'created_at'], name='transaction_transac_6dc4cd_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['provider_reference'], name='transaction_provide_bae6ef_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['initiated_by', 'created_at'], name='transaction_initiat_41003e_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['order', 'transaction_type'], name='transaction_order_i_2a43a8_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['created_at'], name='transaction_created_5c02ac_idx'),
        ),
    ]
