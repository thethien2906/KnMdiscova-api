# docker-compose.ssl.yml
version: '3.8'

services:
  app:
    build:
      context: .
      args:
        - DEV=false
    container_name: kmdiscova-api-prod
    expose:
      - "8000"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py createsuperuser --noinput --email admin@kmdiscova.com --user_type Admin || true &&
             gunicorn app.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120"
    environment:
      - DJANGO_SUPERUSER_PASSWORD=admin123456
      - HTTPS_ENABLED=True
    env_file:
      - .env.prod
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - kmdiscova-network

  nginx:
    image: nginx:alpine
    container_name: kmdiscova-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.ssl.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - kmdiscova-network

  certbot:
    image: certbot/certbot
    container_name: kmdiscova-certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped
    networks:
      - kmdiscova-network

  redis:
    image: redis:7-alpine
    container_name: kmdiscova-redis-prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - kmdiscova-network

  celery-worker:
    build:
      context: .
      args:
        - DEV=false
    container_name: kmdiscova-celery-worker-prod
    command: celery -A app worker --loglevel=info --queues=default,slots
    volumes:
      - media_volume:/app/media # If your tasks need access to media files
    env_file:
      - .env.prod
    depends_on:
      - redis
      - app
    restart: unless-stopped
    networks:
      - kmdiscova-network

  celery-beat:
    build:
      context: .
      args:
        - DEV=false
    container_name: kmdiscova-celery-beat-prod
    command: celery -A app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - .env.prod
    depends_on:
      - redis
      - app
    restart: unless-stopped
    networks:
      - kmdiscova-network


networks:
  kmdiscova-network:
    driver: bridge

volumes:
  static_volume:
  media_volume:
  redis_data:
